(in-package #:lila)

(defun (setf vref) (new-value v i)
  (setf-vref v new-value i))

(defun read-vector (stream char n)
  (declare (ignore char n))
  (let ((x (read stream t nil t)))
    (apply (ecase (get-element-tag x)
             (#b11 #'complex-double-vector)
             (#b10 #'complex-single-vector)
             (#b01 #'real-double-vector)
             (#b00 #'real-single-vector))
           x)))

(set-dispatch-macro-character #\# #\V #'read-vector)

(defmethod print-object ((object lvector) stream)
  (if *print-readably*
      (loop for i below (dimension object)
            initially (write-string "#V" stream)
            finally (write-char #\) stream)
            do (write-char (if (cl:zerop i) #\( #\Space) stream)
               (write (vref object i) :stream stream))
      (print-unreadable-object (object stream :type t)
        (loop for i below (dimension object)
              unless (cl:zerop i)
                do (write-char #\Space stream)
              do (write (vref object i) :stream stream))))
  object)
