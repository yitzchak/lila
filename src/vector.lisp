(in-package #:lila)

(defun read-vector (stream char n)
  (declare (ignore char n))
  (let* ((x (read stream t nil t))
         (complexp (some #'complexp x))
         (doublep (some (lambda (y)
                          (or (typep y 'double-float)
                              (and (complexp y)
                                   (or (typep (realpart y) 'double-float)
                                       (typep (imagpart y) 'double-float)))))
                        x)))
    (apply (cond ((and complexp doublep) #'complex-double-vector)
                 (complexp #'complex-single-vector)
                 (doublep #'real-double-vector)
                 (t #'real-single-vector))
           x)))

(set-dispatch-macro-character #\# #\V #'read-vector)

(defmethod print-object ((object lvector) stream)
  (if *print-readably*
      (loop for i below (dimension object)
            finally (write-char #\) stream)
            when (cl:zerop i)
              do (write-string "#V(" stream)
            else
              do (write-char #\Space stream)
            do (write (vref object i) :stream stream))
      (print-unreadable-object (object stream :type t)
        (loop for i below (dimension object)
              unless (cl:zerop i)
                do (write-char #\Space stream)
              do (write (vref object i) :stream stream))))
  object)
